@using WeddingServer.Dto.Model
@model IList<GuestModel>

@{
    ViewData["Title"] = "Quản lý khách mời";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Playfair+Display:wght@600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --pink: #ec4899;
            --pink-dark: #db2777;
            --pink-light: #fbcfe8;
            --pink-lighter: #fce7f3;
            --green: #10b981;
            --yellow: #f59e0b;
            --gray: #6b7280;
            --gray-dark: #374151;
            --gray-light: #f3f4f6;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #fff5f7 0%, #ffe5f1 25%, #fff0f8 50%, #fce4ec 75%, #fff5f7 100%);
            background-size: 400% 400%;
            animation: gradientShift 20s ease infinite;
            color: var(--gray-dark);
            min-height: 100vh;
            padding: 2rem 1rem;
        }

        @@keyframes gradientShift {
            0%, 100%

        {
            background-position: 0% 50%;
        }

        50% {
            background-position: 100% 50%;
        }

        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        /* Header */
        .page-header {
            text-align: center;
            margin-bottom: 3rem;
            animation: fadeInDown 0.6s ease-out;
        }

        @@keyframes fadeInDown {
            from

        {
            opacity: 0;
            transform: translateY(-30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        h1 {
            font-family: 'Playfair Display', serif;
            font-size: clamp(2rem, 5vw, 3rem);
            color: var(--pink);
            margin-bottom: 0.5rem;
            text-shadow: 0 2px 10px rgba(236, 72, 153, 0.2);
        }

        .subtitle {
            color: var(--gray);
            font-size: 1rem;
        }

        /* Add Guest Form */
        .add-guest-form {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 20px;
            box-shadow: 0 4px 20px rgba(236, 72, 153, 0.12);
            margin-bottom: 2.5rem;
            animation: fadeInUp 0.6s ease-out 0.1s both;
        }

        @@keyframes fadeInUp {
            from

        {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        label {
            font-weight: 600;
            color: var(--gray-dark);
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        input {
            padding: 0.85rem 1rem;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            font-size: 0.95rem;
            font-family: 'Inter', sans-serif;
            transition: all 0.3s ease;
            background: white;
        }

            input:focus {
                outline: none;
                border-color: var(--pink);
                box-shadow: 0 0 0 4px rgba(236, 72, 153, 0.1);
            }

            input:read-only {
                background: var(--gray-light);
                color: var(--gray);
                cursor: not-allowed;
            }

        .btn-submit {
            width: 100%;
            padding: 1rem 2rem;
            background: linear-gradient(135deg, var(--pink), var(--pink-dark));
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(236, 72, 153, 0.3);
        }

            .btn-submit:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(236, 72, 153, 0.4);
            }

            .btn-submit:active {
                transform: translateY(0);
            }

        /* Filter Buttons */
        .filter-bar {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 1rem;
            margin-bottom: 2.5rem;
            animation: fadeIn 0.6s ease-out 0.2s both;
        }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
        }

        to {
            opacity: 1;
        }

        }

        .filter-btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 50px;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

            .filter-btn.active {
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
            }

        .filter-all {
            background: linear-gradient(135deg, var(--pink), var(--pink-dark));
            color: white;
        }

        .filter-accepted {
            background: #d1fae5;
            color: #065f46;
        }

        .filter-declined {
            background: #e5e7eb;
            color: var(--gray-dark);
        }

        .filter-not-sent {
            background: #fef3c7;
            color: #92400e;
        }

        .filter-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }

        /* Guest Cards */
        .guest-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 1.5rem;
            animation: fadeIn 0.6s ease-out 0.3s both;
        }

        .guest-card {
            background: white;
            border-radius: 20px;
            padding: 1.75rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

            .guest-card::before {
                content: '';
                position: absolute;
                left: 0;
                top: 0;
                bottom: 0;
                width: 5px;
            }

            .guest-card.accepted::before {
                background: var(--green);
            }

            .guest-card.declined::before {
                background: var(--gray);
            }

            .guest-card.pending::before {
                background: var(--yellow);
            }

            .guest-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            }

        .guest-name {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--gray-dark);
            margin-bottom: 0.5rem;
        }

        .guest-url {
            font-size: 0.85rem;
            color: var(--gray);
            word-break: break-all;
            margin-bottom: 1rem;
            padding: 0.5rem;
            background: var(--gray-light);
            border-radius: 8px;
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .badge-sent {
            background: #d1fae5;
            color: #065f46;
        }

        .badge-not-sent {
            background: #fef3c7;
            color: #92400e;
        }

        .guest-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 10px;
            font-size: 0.875rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.25s ease;
            display: inline-flex;
            align-items: center;
            gap: 5px;
            text-decoration: none;
        }

        .btn-view {
            background: var(--pink-lighter);
            color: var(--pink-dark);
        }

            .btn-view:hover {
                background: var(--pink-light);
                transform: translateY(-2px);
            }

        .btn-copy {
            background: var(--gray-light);
            color: var(--gray-dark);
        }

            .btn-copy:hover {
                background: #e5e7eb;
                transform: translateY(-2px);
            }

        .btn-mark-sent {
            background: #d1fae5;
            color: #065f46;
        }

            .btn-mark-sent:hover {
                background: #a7f3d0;
                transform: translateY(-2px);
            }

        .btn-delete {
            background: #fee2e2;
            color: #dc2626;
        }

            .btn-delete:hover {
                background: #fecaca;
                transform: translateY(-2px);
            }

        /* Stats Bar */
        .stats-bar {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
            animation: fadeIn 0.6s ease-out 0.15s both;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 16px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .stat-icon {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: var(--pink);
        }

        .stat-label {
            font-size: 0.875rem;
            color: var(--gray);
            margin-top: 0.25rem;
        }

        /* Toast */
        .toast {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: white;
            padding: 1.25rem 1.75rem;
            border-radius: 16px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
            display: none;
            align-items: center;
            gap: 12px;
            z-index: 10000;
            animation: slideInRight 0.4s ease-out;
        }

        @@keyframes slideInRight {
            from

        {
            opacity: 0;
            transform: translateX(100px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }

        }

        .toast.show {
            display: flex;
        }

        .toast.success {
            border-left: 4px solid var(--green);
        }

        .toast.error {
            border-left: 4px solid #ef4444;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: var(--gray);
        }

        .empty-icon {
            font-size: 5rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        /* Responsive */
        @@media (max-width: 768px) {
            body

        {
            padding: 1rem 0.5rem;
        }

        .add-guest-form {
            padding: 1.5rem;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        .filter-bar {
            flex-direction: column;
            align-items: stretch;
        }

        .filter-btn {
            justify-content: center;
        }

        .guest-grid {
            grid-template-columns: 1fr;
        }

        .stats-bar {
            grid-template-columns: repeat(2, 1fr);
        }

        .toast {
            right: 15px;
            left: 15px;
        }

        }
    </style>
</head>
<body>
    <!-- Toast Notification -->
    <div class="toast" id="toast">
        <div class="toast-icon" id="toastIcon"></div>
        <div class="toast-message" id="toastMessage"></div>
    </div>

    <div class="container">
        <!-- Header -->
        <div class="page-header">
            <h1>💌 Quản lý khách mời</h1>
            <p class="subtitle">Tạo và quản lý thiệp cưới cho từng khách mời</p>
        </div>

        <!-- Stats Bar -->
        <div class="stats-bar">
            <div class="stat-card">
                <div class="stat-icon">👥</div>
                <div class="stat-number" id="stat-total">@Model.Count</div>
                <div class="stat-label">Tổng khách</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">✅</div>
                <div class="stat-number" id="stat-accepted">@Model.Count(m => m.Status == "accepted")</div>
                <div class="stat-label">Tham gia</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">❌</div>
                <div class="stat-number" id="stat-declined">@Model.Count(m => m.Status == "declined")</div>
                <div class="stat-label">Không tham gia</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">📬</div>
                <div class="stat-number" id="stat-not-sent">@Model.Count(m => !m.Sent)</div>
                <div class="stat-label">Chưa gửi</div>
            </div>
        </div>

        <!-- Add Guest Form -->
        <form class="add-guest-form" id="addGuestForm">
            <div class="form-grid">
                <div class="form-group">
                    <label for="guestName">Tên khách mời *</label>
                    <input type="text" id="guestName" placeholder="VD: Nguyễn Văn A" required />
                </div>
                <div class="form-group">
                    <label for="guestId">ID (tự động tạo)</label>
                    <input type="text" id="guestId" readonly />
                </div>
                <div class="form-group">
                    <label for="guestUrl">URL thiệp (tự động tạo)</label>
                    <input type="text" id="guestUrl" readonly />
                </div>
            </div>
            <button type="submit" class="btn-submit">+ Tạo khách mời mới</button>
        </form>

        <!-- Filter Bar -->
        <div class="filter-bar">
            <button class="filter-btn filter-all active" data-filter="all">
                🎯 Tất cả (<span id="count-all">@Model.Count</span>)
            </button>
            <button class="filter-btn filter-accepted" data-filter="accepted">
                ✅ Tham gia (<span id="count-accepted">@Model.Count(m => m.Status == "accepted")</span>)
            </button>
            <button class="filter-btn filter-declined" data-filter="declined">
                ❌ Không tham gia (<span id="count-declined">@Model.Count(m => m.Status == "declined")</span>)
            </button>
            <button class="filter-btn filter-not-sent" data-filter="not-sent">
                📬 Chưa gửi (<span id="count-not-sent">@Model.Count(m => !m.Sent)</span>)
            </button>
        </div>

        <!-- Guest List -->
        <div class="guest-grid" id="guestList">
            @foreach (var g in Model)
            {
                var statusClass = g.Status == "accepted" ? "accepted" :
                g.Status == "declined" ? "declined" : "pending";
                var sentBadge = g.Sent ? "badge-sent" : "badge-not-sent";
                var sentText = g.Sent ? "🟢 Đã gửi thiệp" : "🟡 Chưa gửi";

                <div class="guest-card @statusClass"
                     data-status="@g.Status"
                     data-sent="@g.Sent.ToString().ToLower()"
                     data-id="@g.GuestId">
                    <h3 class="guest-name">@g.Name</h3>
                    <div class="guest-url">@g.Url</div>
                    <span class="status-badge @sentBadge status-flag">@sentText</span>
                    <div class="guest-actions">
                        <div class="guest-item">
                            <a href="#" data-partial-url="@g.Url" target="_blank" class="action-btn btn-view">
                                🔗 Xem thiệp
                            </a>
                            <button class="action-btn btn-copy copy-btn" data-partial-url="@g.Url">
                                📋 Copy
                            </button>
                        </div>
                        @if (!g.Sent)
                        {
                            <button class="action-btn btn-mark-sent mark-sent-btn" data-id="@g.GuestId">
                                ✅ Đánh dấu đã gửi
                            </button>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Empty State -->
        @if (!Model.Any())
        {
            <div class="empty-state">
                <div class="empty-icon">📭</div>
                <h3>Chưa có khách mời nào</h3>
                <p>Hãy thêm khách mời đầu tiên bằng form bên trên!</p>
            </div>
        }

        <script>
            // Elements
            const form = document.getElementById('addGuestForm');
            const guestName = document.getElementById('guestName');
            const guestId = document.getElementById('guestId');
            const guestUrl = document.getElementById('guestUrl');
            const guestList = document.getElementById('guestList');
            const filterButtons = document.querySelectorAll('.filter-btn');

            // Initialize URLs for view and copy buttons
            document.addEventListener('DOMContentLoaded', () => {
                const viewButtons = document.querySelectorAll('.btn-view');
                const copyButtons = document.querySelectorAll('.btn-copy');

                // Update href for view buttons
                viewButtons.forEach(button => {
                    const partialUrl = button.getAttribute('data-partial-url');
                    if (partialUrl) {
                        const fullUrl = `${window.location.origin}${partialUrl}`;
                        button.href = fullUrl;
                        console.log('Updated view button URL:', fullUrl);
                    } else {
                        console.warn('Missing partial URL for view button:', button);
                        button.classList.add('disabled');
                    }
                });

                // Update data-url for copy buttons
                copyButtons.forEach(button => {
                    const partialUrl = button.getAttribute('data-partial-url');
                    if (partialUrl) {
                        const fullUrl = `${window.location.origin}${partialUrl}`;
                        button.setAttribute('data-url', fullUrl);
                        console.log('Updated copy button URL:', fullUrl);
                    } else {
                        console.warn('Missing partial URL for copy button:', button);
                        button.disabled = true;
                    }
                });
            });

            // Convert to slug
            function toSlug(str) {
                return str.normalize('NFD')
                    .replace(/[\u0300-\u036f]/g, '')
                    .replace(/đ/g, 'd')
                    .replace(/Đ/g, 'D')
                    .replace(/[^a-zA-Z0-9\s]/g, '')
                    .trim()
                    .replace(/\s+/g, '')
                    .toLowerCase();
            }

            // Auto-generate ID and URL
            guestName.addEventListener('input', () => {
                const base = toSlug(guestName.value);
                if (base.length > 0) {
                    const random = Math.floor(100 + Math.random() * 900);
                    const id = base + random;
                    const partialUrl = `/api/wedding/ui-wedding-card?id=${id}`;
                    guestId.value = id;
                    guestUrl.value = `${window.location.origin}${partialUrl}`;
                    console.log('Generated guest ID:', id, 'URL:', guestUrl.value);
                } else {
                    guestId.value = '';
                    guestUrl.value = '';
                }
            });

            // Submit form
            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                const name = guestName.value.trim();
                const id = guestId.value.trim();
                const partialUrl = `/api/wedding/ui-wedding-card?id=${id}`;

                if (!name || !id) {
                    showToast('Vui lòng nhập đầy đủ thông tin', 'error');
                    return;
                }

                try {

                    console.log('Submitting new guest:', { id, name, url: partialUrl });
                    const response = await fetch('/api/wedding/add-guest', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ id, name, url: partialUrl })
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.message || 'Không thể tạo khách mời');
                    }

                    // Add card to list
                    const card = createGuestCard(name, id, partialUrl);
                    guestList.insertBefore(card, guestList.firstChild);

                    // Update stats
                    updateStats(1, 0, 0, 1);

                    // Reset form
                    form.reset();
                    guestId.value = '';
                    guestUrl.value = '';

                    showToast('Đã thêm khách mời thành công!', 'success');
                } catch (err) {
                    console.error('Add guest error:', err);
                    showToast('Lỗi: ' + err.message, 'error');
                }
            });

            // Create guest card
            function createGuestCard(name, id, partialUrl) {
                const fullUrl = `${window.location.origin}${partialUrl}`;
                const div = document.createElement('div');
                div.className = 'guest-card pending';
                div.dataset.status = '';
                div.dataset.sent = 'false';
                div.dataset.id = id;
                div.innerHTML = `
                    <h3 class="guest-name">${name}</h3>
                    <div class="guest-url">${partialUrl}</div>
                    <span class="status-badge badge-not-sent status-flag">🟡 Chưa gửi</span>
                    <div class="guest-actions">
                        <div class="guest-item">
                            <a href="${fullUrl}" target="_blank" class="action-btn btn-view" data-partial-url="${partialUrl}">
                                🔗 Xem thiệp
                            </a>
                            <button class="action-btn btn-copy copy-btn" data-partial-url="${partialUrl}" data-url="${fullUrl}">
                                📋 Copy
                            </button>
                        </div>
                        <button class="action-btn btn-mark-sent mark-sent-btn" data-id="${id}">
                            ✅ Đánh dấu đã gửi
                        </button>
                    </div>
                `;
                console.log('Created guest card with URL:', fullUrl);
                return div;
            }

            // Filter functionality
            filterButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    filterButtons.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');

                    const filter = btn.dataset.filter;
                    const cards = guestList.querySelectorAll('.guest-card');

                    cards.forEach(card => {
                        const status = card.dataset.status || '';
                        const sent = card.dataset.sent === 'true';
                        let show = false;

                        if (filter === 'all') show = true;
                        else if (filter === 'accepted' && status === 'accepted') show = true;
                        else if (filter === 'declined' && status === 'declined') show = true;
                        else if (filter === 'not-sent' && !sent) show = true;

                        card.style.display = show ? '' : 'none';
                    });
                });
            });

            // Handle copy and mark sent
                        guestList.addEventListener('click', (e) => {
                const btn = e.target.closest('.copy-btn, .mark-sent-btn');
                if (!btn) return;

                // -------------------------------
                // Copy URL
                // -------------------------------
                if (btn.classList.contains('copy-btn')) {
                    const fullUrl = btn.getAttribute('data-url');
                    if (!fullUrl) {
                        showToast('Không có URL để copy', 'error');
                        return;
                    }

                    // Thực hiện copy, có fallback cho mobile
                    const copyText = (text) => {
                        try {
                            if (navigator.clipboard && navigator.clipboard.writeText) {
                                navigator.clipboard.writeText(text)
                                    .then(() => {
                                        btn.innerHTML = '✅ Đã copy!';
                                        setTimeout(() => btn.innerHTML = '📋 Copy', 2000);
                                        showToast('Đã copy URL vào clipboard!', 'success');
                                    })
                                    .catch((err) => {
                                        fallbackCopy(text);
                                    });
                            } else {
                                fallbackCopy(text);
                            }
                        } catch (err) {
                            fallbackCopy(text);
                        }

                        // Fallback bằng textarea
                        function fallbackCopy(text) {
                            try {
                                const textarea = document.createElement('textarea');
                                textarea.value = text;
                                textarea.style.position = 'fixed';
                                textarea.style.opacity = '0';
                                document.body.appendChild(textarea);
                                textarea.select();
                                document.execCommand('copy');
                                document.body.removeChild(textarea);

                                btn.innerHTML = '✅ Đã copy!';
                                setTimeout(() => btn.innerHTML = '📋 Copy', 2000);
                                showToast('Đã copy URL (fallback)', 'success');
                            } catch (err) {
                                console.error('Copy fallback error:', err);
                                showToast('Không thể copy. Vui lòng copy thủ công.', 'error');
                            }
                        }
                    };

                    copyText(fullUrl);
                    return; // tránh thực thi phần mark-sent
                }

                // -------------------------------
                // Mark as Sent
                // -------------------------------
                if (btn.classList.contains('mark-sent-btn')) {
                    const guestId = btn.dataset.id;
                    const card = btn.closest('.guest-card');
                    const flag = card.querySelector('.status-flag');

                    (async () => {
                        try {
                            const response = await fetch('/api/wedding/mark-sent', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ guestId })
                            });

                            if (!response.ok) {
                                const error = await response.json();
                                throw new Error(error.message || 'Không thể đánh dấu đã gửi');
                            }

                            flag.className = 'status-badge badge-sent status-flag';
                            flag.textContent = '🟢 Đã gửi thiệp';
                            card.dataset.sent = 'true';
                            btn.remove();

                            updateStats(0, 0, 0, -1);
                            showToast('Đã đánh dấu đã gửi!', 'success');
                        } catch (err) {
                            console.error('Mark sent error:', err);
                            showToast('Lỗi: ' + err.message, 'error');
                        }
                    })();
                }
            });


            // Update stats
            function updateStats(total = 0, accepted = 0, declined = 0, notSent = 0) {
                const statTotal = document.getElementById('stat-total');
                const statAccepted = document.getElementById('stat-accepted');
                const statDeclined = document.getElementById('stat-declined');
                const statNotSent = document.getElementById('stat-not-sent');
                const countAll = document.getElementById('count-all');
                const countAccepted = document.getElementById('count-accepted');
                const countDeclined = document.getElementById('count-declined');
                const countNotSent = document.getElementById('count-not-sent');

                statTotal.textContent = parseInt(statTotal.textContent) + total;
                statAccepted.textContent = parseInt(statAccepted.textContent) + accepted;
                statDeclined.textContent = parseInt(statDeclined.textContent) + declined;
                statNotSent.textContent = parseInt(statNotSent.textContent) + notSent;

                countAll.textContent = statTotal.textContent;
                countAccepted.textContent = statAccepted.textContent;
                countDeclined.textContent = statDeclined.textContent;
                countNotSent.textContent = statNotSent.textContent;
            }

            // Show toast
            function showToast(message, type = 'success') {
                const toast = document.getElementById('toast');
                const icon = document.getElementById('toastIcon');
                const msg = document.getElementById('toastMessage');

                icon.textContent = type === 'success' ? '✅' : '❌';
                msg.textContent = message;
                toast.className = `toast ${type} show`;

                setTimeout(() => {
                    toast.classList.remove('show');
                }, 3000);
            }

            console.log('✨ Guest Management loaded successfully!');
        </script>
    </div>
</body>



</html>